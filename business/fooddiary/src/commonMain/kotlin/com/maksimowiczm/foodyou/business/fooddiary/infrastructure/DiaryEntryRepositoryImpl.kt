package com.maksimowiczm.foodyou.business.fooddiary.infrastructure

import com.maksimowiczm.foodyou.business.fooddiary.domain.DiaryEntry
import com.maksimowiczm.foodyou.business.fooddiary.domain.DiaryEntryRepository
import com.maksimowiczm.foodyou.business.fooddiary.domain.DiaryFood
import com.maksimowiczm.foodyou.business.fooddiary.infrastructure.room.RoomDiaryEntryDataSource
import com.maksimowiczm.foodyou.shared.common.domain.measurement.Measurement
import kotlinx.coroutines.flow.Flow
import kotlinx.datetime.LocalDate
import kotlinx.datetime.LocalDateTime

internal class DiaryEntryRepositoryImpl(
    private val localDiaryEntryDataSource: RoomDiaryEntryDataSource
) : DiaryEntryRepository {
    override fun observeEntry(id: Long): Flow<DiaryEntry?> =
        localDiaryEntryDataSource.observeEntry(id)

    override fun observeEntries(mealId: Long, date: LocalDate): Flow<List<DiaryEntry>> =
        localDiaryEntryDataSource.observeEntries(mealId = mealId, date = date)

    override suspend fun createDiaryEntry(
        measurement: Measurement,
        mealId: Long,
        date: LocalDate,
        food: DiaryFood,
        createdAt: LocalDateTime,
    ): Long {
        val entry =
            DiaryEntry(
                id = 0, // ID will be generated by the data source
                mealId = mealId,
                date = date,
                measurement = measurement,
                food = food,
                createdAt = createdAt,
                updatedAt = createdAt,
            )

        return localDiaryEntryDataSource.insert(entry)
    }

    override suspend fun updateDiaryEntry(entry: DiaryEntry) {
        localDiaryEntryDataSource.update(entry)
    }

    override suspend fun deleteDiaryEntry(id: Long) {
        localDiaryEntryDataSource.delete(id)
    }
}
